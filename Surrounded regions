public class Solution {
    public void Solve(char[,] board) {
        
        if(board.Length == 0)
            return;
        
        int row = board.GetLength(0);
        int col = board.GetLength(1);
        
        //Replace O with -
        for(int i = 0 ;i < row; i++)
            for(int j = 0 ; j < col; j++)
                if(board[i,j] == 'O')
                    board[i,j]= '-';
                    
        //Replace edges back with O
        //TOP ROW
        for(int i = 0; i < col; i++)
        {
         if(board[0,i] == '-')
         {
             floodfill(board,0,i,'-','O',row,col);
         }
         
        }
        //Right col
        for(int i = 0 ;i < row;i++)
        {
            if(board[i,col-1] == '-')
            floodfill(board,i,col-1,'-','O',row,col);
        }
        
        //Lower row
        for(int i = 0;i < col;i++)
        {
            if(board[row-1,i] == '-')
            floodfill(board,row-1,i,'-','O',row,col);
        }
        
        for(int i = 0;i<row;i++)
        {
            if(board[i,0] =='-')
            floodfill(board,i,0,'-','0',row,col);
        }
        
        for(int i=0;i<row;i++)
            for(int j =0 ;j <col;j++)
                if(board[i,j] =='-')
                  board[i,j] ='X';
        
    }
    
    public static void floodfill(char[,] board,int i,int j , char prev, char newc,int row,int col)
    {
        if(i < 0 || i >= row || j < 0 || j >= col)
            return;
            
        if(board[i,j] != prev)
            return;
            
        board[i,j] = newc;
        
        floodfill(board,i+1,j,prev,newc,row,col);
        floodfill(board,i-1,j,prev,newc,row,col);

        floodfill(board,i,j+1,prev,newc,row,col);

        floodfill(board,i,j-1,prev,newc,row,col);

        
        
        
    }
}
